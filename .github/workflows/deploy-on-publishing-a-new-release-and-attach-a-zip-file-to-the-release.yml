name: Deploy to WordPress.org Repository

on:

  # Since we want to publish new versions of our plugin, we only want this action to
  # run when publishing a new release.
  #
  # The released version of the plugin will then be deployed to the repository.
  #
  # This allows us to run and manage plugin releases from a single location.
  release:

    # run only when a new release is published, but not when it's classified as a pre-release.
    types: [released]

jobs:
  deploy_to_wp_repository:

    # The proper name for the job being run.
    name: Deploy to WP.org

    # The environment this job should run on. In the context of WordPress, ubuntu-latest is
    # pretty typical. Since we are only interacting with git and subversion, Ubuntu is perfect
    # for this.
    #
    # Github does offer other platforms if you need them: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idruns-on
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install SVN ( Subversion )
      run: |
        sudo apt-get update
        sudo apt-get install subversion

    - name: WordPress Plugin Deploy

      # Here, this unique identifier lets us use the output from the action to get the zip-path later.
      id: deploy
      uses: 10up/action-wordpress-plugin-deploy@stable
      with:
        generate-zip: true

      # Steps can also set environment variables which can be configured in the Github settings for the
      # repository. Here, we are using action secrets SVN_USERNAME, SVN_PASSWORD, and PLUGIN_SLUG which
      # authenticate with WordPress and lets the action deploy our plugin to the repository.
      #
      # To learn more about setting and using secrets with Github Actions, check out: https://docs.github.com/en/actions/security-guides/encrypted-secrets?tool=webui#about-encrypted-secrets
      env:
        SVN_USERNAME: ${{ secrets.WP_SVN_USERNAME }}
        SVN_PASSWORD: ${{ secrets.WP_SVN_PASSWORD }}

    # After the deploy, we also want to create a zip and upload it to the release on Github. We don't want
    # users to have to go to the repository to find our plugin :).
    - name: Upload release asset
      uses: softprops/action-gh-release@v2
      env:
        # Note, this is an exception to action secrets: GH_TOKEN is always available and provides access to
        # the current repository this action runs in.
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        # Provide what the file should be named when attached to the release (plugin-name.zip)
        files: ${{ github.workspace }}/${{ github.event.repository.name }}.zip